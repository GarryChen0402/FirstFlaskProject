# # import os
# # from flask import Flask
# # from flask_sqlalchemy import SQLAlchemy
# # from sqlalchemy import text
# #
# # base_dir=os.path.abspath(os.path.dirname(__file__))
# # app=Flask(__name__)
# #
# # app.config['SQLALCHEMY_DATABASE_URI']='sqlite:///'+os.path.join(base_dir,'data1.sqlite')
# # app.config['SQLALCHEMY_TRACK_MODIFICATIONS']=True
# # app.config['SQLALCHEMY_COMMIT_TEARDOWN']=True
# # db=SQLAlchemy(app)
# #
# # class User(db.Model):
# #     id = db.Column(db.Integer, primary_key=True, autoincrement=True)
# #     username = db.Column(db.String(100), nullable=False)
# #     password = db.Column(db.String(100), nullable=False)
# #     sex=db.Column(db.Integer,nullable=False,default=0)
# #     age = db.Column(db.Integer, nullable=False, default=0)
# #     status = db.Column(db.Integer, nullable=False,default=0)
# #     createdate=db.Column(db.DateTime,nullable=False,server_default=text('CURRENT_TIMESTAMP'))
# #
# #     def __repr__(self):
# #         return f"{self.id},{self.username}"
# #
# # db.drop_all()
# # db.create_all()
# #
# # if __name__=="__main__":
# #     app.run()
# #
# #
# import os
# from flask import Flask
# from flask_sqlalchemy import SQLAlchemy
# from sqlalchemy import text
#
# base_dir=os.path.abspath(os.path.dirname(__file__))
# app=Flask(__name__)
# app.config['SQLALCHEMY_DATABASE_URI']='sqlite:///'+os.path.join(base_dir,'data2.sqlite')
# app.config['SQLALCHEMY_TRACK_MODIFICATIONS']=True
# app.config['SQLALCHEMY_COMMIT_TEARDOWN']=True
# db=SQLAlchemy(app)
#
# class User(db.Model):
#     __tablename__ = 'user'
#     id = db.Column(db.Integer, primary_key=True, autoincrement=True)
#     username = db.Column(db.String(100), nullable=False)
#     password = db.Column(db.String(100), nullable=False)
#     sex=db.Column(db.Integer,nullable=False,default=0)
#     age = db.Column(db.Integer, nullable=False, default=0)
#     status = db.Column(db.Integer, nullable=False,default=0)
#     createdate=db.Column(db.DateTime,nullable=False,server_default=text('CURRENT_TIMESTAMP'))
#
#     def __repr__(self):
#         return f"{self.id},{self.username}"
#
# @app.route("/test")
# def test():
#     try:
#         # 开始事务
#         db.session.begin()
#         # 执行一系列数据库操作
#         user1 = User(username="test1", password="123456", age=35, status=1)
#         db.session.add(user1)
#
#         user2 = User(username="test2", password='000000', age=35, status=1)
#         db.session.add(user2)
#
#         # 提交事务
#         db.session.commit()
#         return "事务执行成功"
#     except Exception as e:
#         # 回滚事务
#         db.session.rollback()
#         print(e)
#         return "事务执行失败"
#         # raise e
# db.drop_all()
# db.create_all()
# if __name__=="__main__":
#     app.run()
#
#
import os
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from sqlalchemy import MetaData
from flask_migrate import Migrate
base_dir=os.path.abspath(os.path.dirname(__file__))
app=Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI']='sqlite:///'+os.path.join(base_dir,'data.sqlite')
app.config['SQLALCHEMY_TRACK_MODIFICATIONS']=False
app.config['SQLALCHEMY_COMMIT_TEARDOWN']=True
app.config['DEBUG'] = True

naming_convention = {
    "ix": 'ix_%(column_0_label)s',
    "uq": "uq_%(table_name)s_%(column_0_name)s",
    "ck": "ck_%(table_name)s_%(column_0_name)s",
    "fk": "fk_%(table_name)s_%(column_0_name)s_%(referred_table_name)s",
    "pk": "pk_%(table_name)s"
}
# 创建数据库aqlalchemy工具对象
db=SQLAlchemy(app,metadata=MetaData(naming_convention=naming_convention))
#第一个参数是Flask的实例，第二个参数是Sqlalchemy数据库实例，创建数据库迁移工具对象
migrate = Migrate(app, db,render_as_batch=True)
#处于“一”模型
class Depart(db.Model):
    __tablename__='tb_depart'
    id=db.Column(db.Integer,primary_key=True)
    name=db.Column(db.String(50),unique=True)
    users=db.relationship("User",backref="back_depart",lazy=True)
    def __repr__(self):
        return f"{self.id},{self.name}"
#处于“多”模型
class User(db.Model):
    __tablename__='tb_user'
    id=db.Column(db.Integer,primary_key=True)
    username=db.Column(db.String(50),unique=True)
    age=db.Column(db.Integer,default=0)
    depart_id=db.Column(db.Integer,db.ForeignKey("tb_depart.id"))
    def __repr__(self):
        return f"{self.id},{self.username}"
#db.drop_all()
#db.create_all()
if __name__=="__main__":
    app.run()





